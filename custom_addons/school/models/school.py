from odoo import fields, models, api, _from odoo.exceptions import UserErrorimport re# b'2.2 Mb'def convertToMbSize(binary_file_size):    match_file = re.match(r'^(\d+(?:\.\d+)?)\s*([KMG]?)B?$',binary_file_size.decode("utf-8"), re.IGNORECASE)    if not match_file:        match_file = re.match(r'^(\d+(?:\.\d+)?)\s*(bytes)$', binary_file_size.decode("utf-8"), re.IGNORECASE)    file_size = float(match_file.group(1))    file_extention = match_file.group(2)    if file_extention == "K":        file_size /= 1024    elif file_extention == "M":        file_size *= 1024    elif file_extention == "G":        file_size *= 1024    else:        file_size /= 1024**2    return file_sizeclass SchoolProfile(models.Model):    _name = "school.profile"    _inherit = "mail.thread"    active = fields.Boolean("Active", default=True)    school_seq_name = fields.Char("School Code", readonly=1)    name = fields.Char(string="School Name", copy=False, default="Sunny Leone",                       translate=True)    email = fields.Char(string="Email", copy=False)    phone = fields.Char("Phone", copy=False)    is_virtual_class = fields.Boolean(string="Virtual Class Support?")    school_rank = fields.Integer(string="Rank")    result = fields.Float(string="Result")    address = fields.Text(string="Address", translate=True)    estalish_date = fields.Date(string="Establish Date")    open_date = fields.Datetime("Open Date")    currency_id = fields.Many2one("res.currency", string="Currency")    school_type = fields.Selection([('public','Public School'),                                    ('private', 'Private School')],                                   string="Type of School",                                   )    documents = fields.Binary(string="Documents")    document_name = fields.Char(string="File Name")    school_image = fields.Image(string="Upload School Image", max_width=100,                                max_height=100)    school_description = fields.Html(string="Description", copy=False)    auto_rank = fields.Integer(compute="_auto_rank_populate", string="Auto "                                                                     "Rank",                               store=True, help="This is auto populate data "                                                "based on school type change.")    document = fields.Binary("Document")    _sql_constraints = [        ('name_unique', 'unique (name)', "Please enter unique school name, Given school name already exists.")    ]    @api.depends("school_type")    def _auto_rank_populate(self):        for rec in self:            if rec.school_type == "private":                rec.auto_rank = 50            elif rec.school_type == "public":                rec.auto_rank = 100            else:                rec.auto_rank = 0    # @api.model    # def name_create(self, name):    #     rtn = self.create({"name":name, "email":"abc@gmail.com"})    #     return rtn.name_get()[0]    def name_get(self):        student_list = []        for school in self:            # print(self, school)            name = school.name            if school.school_type:                name += " ({})".format(school.school_type)            student_list.append((school.id, name))        return student_list    @api.model    def create(self, vals):        print("School Profile create vals ",vals)        vals['school_seq_name'] = self.env['ir.sequence'].next_by_code("school.profile")        rtn = super(SchoolProfile, self).create(vals)        return rtn    def write(self, vals):        print("School Profile write vals ",vals)        rtn = super(SchoolProfile, self).write(vals)        if self.document and convertToMbSize(self.with_context(bin_size=True).document) > 1024:            raise UserError(_("File should not be more then 1 MB"))        return rtn    def specialCommand(self):        # Below code is only for 0,0,vals command        # First Way to create child model for existing parent model.        # student_obj = self.env['school.student']        # stud_id = student_obj.create({'name':"Student ONE", 'school_id':self.id})        # Parent model and child model.        # school_id = self.create({"name":"Kapil Sharma Show"})        # student_obj.create({"name":"Kapil Student 1", "school_id":school_id.id})        # student_obj.create({"name":"Kapil Student 2", "school_id":school_id.id})        # student_obj.create({"name":"Kapil Student 3", "school_id":school_id.id})        # student_obj.create({"name":"Kapil Student 4", "school_id":school_id.id})        # student_obj.create({"name":"Kapil Student 5", "school_id":school_id.id})        # Using speicial Command        self.create({"name":"Babita School", "school_list":[(0, 0, {'name':"Babita Student 1", "total_fees":300}),                                                            (0, 0, {'name':"Babita Student 2", "total_fees":400}),                                                            (0, 0, {'name':"Babita Student 3", "total_fees":500}),                                                            (0, 0, {'name':"Babita Student 4", "total_fees":700}),                                                            (0, 0, {'name':"Babita Student 5", "total_fees":800})]})        # self.write({"school_list": [[0,0,{'name':'Babita School 6'}]]})        pass    def specialCommand1(self):        # No need to use this command        # for student in self.school_list:        #     student.name = student.name + " " +str(student.id)        #     student.total_fees = 3600        #     student.student_fees = 12000        # We can use this command while doing update operation for parent and child model        vals = {'school_list': []}        for student in self.school_list:            vals['school_list'].append([1, student.id, {'name': student.name +" Name",                                                        'total_fees':400,                                                        "student_fees":4500}])        self.write(vals)        # No need to use like this        # for student in self.school_list:        #     student.update({'name': student.name + " 1234567890",        #                     'total_fees': 251,        #                     'student_fees': 6500})        # We can use this instead of special commands        # for student in self.school_list:        #     student.write({'name': student.name + " 1234567890",        #                     'total_fees': 251,        #                     'student_fees': 6500})        pass    def specialCommand2(self):        self.write({'school_list':[(2, 312, 0), (2, 315, 0)]})    def specialCommand3(self):        self.write({'school_list':[(3, 316, False)]})    def specialCommand4(self):        self.write({'school_list':[(4, 316, 0)]})class SchoolStudentProfile(models.Model):    _name = "school.student.profile.security.example"    _description = "This is the demo of access rights tutorial."    name = fields.Char("Name")    email = fields.Char("Email")    phone = fields.Char("Phone")